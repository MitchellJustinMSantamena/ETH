// SPDX-License-Identifier: MIT
/*
1. Minting new tokens: The platform should be able to create new tokens and distribute them to players as rewards. Only the owner can mint tokens.
2. Transferring tokens: Players should be able to transfer their tokens to others.
3. Redeeming tokens: Players should be able to redeem their tokens for items in the in-game store.
4. Checking token balance: Players should be able to check their token balance at any time.
5. Burning tokens: Anyone should be able to burn tokens, that they own, that are no longer needed.
*/
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract FridayScents is ERC20, Ownable {

    mapping(uint256 => uint256) public ShopPrices;
    mapping(address => uint256) public redeemedItems;

    // Event declaration for item redemption
    event ItemRedeemed(address indexed buyer, uint256 item);

    constructor() ERC20("Degen", "DGN") Ownable(msg.sender) {
        ShopPrices[1] = 3000;
        ShopPrices[2] = 2200;
        ShopPrices[3] = 1800;
        ShopPrices[4] = 1200;
    }

    function mintDGN(address _to, uint256 _amount) public onlyOwner {
        _mint(_to, _amount);
    }

    function transferDGN(address _to, uint256 _amount) public {
        require(balanceOf(msg.sender) >= _amount, "Transfer Failed: Insufficient balance.");
        transfer(_to, _amount);
    }

    function showShopItems() external pure returns (string memory) {
        string memory saleOptions = "The Perfume on sale: {1} Jo Malone London {2} Hugo Boss  {3} Calvin Klein Eternity  {4} Creed Aventus ";
        return saleOptions;
    }

       function buyPerfume(uint256 _item, address _recipient) public {
        require(ShopPrices[_item] > 0, "Item is not available.");
        require(_item <= 4, "Item is not available.");
        require(balanceOf(msg.sender) >= ShopPrices[_item], "Buy Failed: Insufficient balance.");
        _transfer(msg.sender, owner(), ShopPrices[_item]);
        redeemedItems[_recipient] = _item;

        }
    
    function burnDGN(uint256 _amount) public {
        require(balanceOf(msg.sender) >= _amount, "Burn Failed: Insufficient balance.");
        _burn(msg.sender, _amount);

        // Log the burned tokens
        emit ItemRedeemed(msg.sender, 0);
    
    }

    function getBalance() external view returns (uint256) {
        return balanceOf(msg.sender);
    }

    function decimals() override public pure returns (uint8) {
        return 0;
    }   
}
